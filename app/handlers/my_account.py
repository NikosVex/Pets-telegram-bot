import logging
from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery

import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(F.text == 'üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç')
async def my_account_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    await message.answer(f'–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n–í–∞—à Telegram ID: <b>{user_id}</b>',
                         reply_markup=kb.my_account_keyboard(user_id), parse_mode='html')


@router.callback_query(F.data.startswith('my_pets_'))
async def my_pets_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        pets = await rq.get_my_pets(user_id)
        if pets:
            await callback.message.answer('–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:')
            for pet in pets:
                if pet.show:
                    status = '–ü—Ä–æ–≤–µ—Ä–µ–Ω ‚úÖ'
                else:
                    status = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω ‚ùå'
                await callback.message.answer_photo(
                    photo=FSInputFile(pet.photo_path),
                    caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n–°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n<b>{pet.likes}</b> ‚ù§Ô∏è',
                    reply_markup=kb.delete_pet(pet.id), parse_mode='html'
                )
        else:
            await callback.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–µ–≥–æ!')
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ my_pets_handler: {e}')


@router.callback_query(F.data.startswith('my_favorites_'))
async def my_favorites_pets_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        pets = await rq.get_user_favorite_pets(user_id)
        if pets:
            await callback.message.answer('–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:')
            for pet in pets:
                await callback.message.answer_photo(
                    photo=FSInputFile(pet.photo_path),
                    caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n\n<b>{pet.likes}</b> ‚ù§Ô∏è',
                    reply_markup=kb.delete_favorite(pet.id), parse_mode='html'
                )
        else:
            await callback.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!')
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ my_favorites_pets_handler: {e}')
