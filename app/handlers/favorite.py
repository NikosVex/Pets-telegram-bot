import os
import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery
from dotenv import load_dotenv

import app.database.requests as rq

router = Router()

load_dotenv()


@router.callback_query(F.data.startswith('favorite_'))
async def favorite_handler(callback: CallbackQuery):
    try:
        pet_id = int(callback.data.split('_')[1])
        user_id = callback.from_user.id
        already_favorited = await rq.check_user_favorited(user_id, pet_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if already_favorited:
            await callback.answer('–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        else:
            await rq.add_favorite(user_id, pet_id)
            await callback.answer('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
            count_of_favorites = await rq.count_of_favorites(user_id)
            if count_of_favorites == 10:
                await callback.message.answer(f'üèÜ –ê—á–∏–≤–∫–∞!\n–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ 10 –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ '
                                              f'—Å–ª–æ–≤–æ {os.getenv("SECRET_WORD_3")}!')
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ favorite_handler: {e}')
