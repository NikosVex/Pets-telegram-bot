import logging
from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.database.requests as rq

router = Router()


class SeacrhPet(StatesGroup):
    username = State()
    petname = State()


@router.message(F.text == 'üîé –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞')
async def search_pet_handler(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –Ω–∞ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚å®Ô∏è', reply_markup=kb.search_pet_keyboard)


@router.message(F.text == 'üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def search_pet_username_handler(message: Message, state: FSMContext):
    await state.set_state(SeacrhPet.username)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤',
                         reply_markup=kb.exit_button)


@router.message(SeacrhPet.username)
async def show_pets_username_handler(message: Message, state: FSMContext):
    try:
        username = message.text
        pets = await rq.get_pet_by_username(username)
        if pets:
            await message.answer(f'–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{username}</b>', parse_mode='html')
            for pet in pets:
                await message.answer_photo(
                    photo=FSInputFile(pet.photo_path),
                    caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n\n<b>{pet.likes}</b> ‚ù§Ô∏è',
                    reply_markup=kb.pets_keyboard_without_next(pet.id), parse_mode='html'
                )
        else:
            await message.answer('–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await state.clear()
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ show_pets_by_username_handler: {e}')


@router.message(F.text == 'üê± –ü–æ –∏–º–µ–Ω–∏ –ø–∏—Ç–æ–º—Ü–∞')
async def search_pet_petname_handler(message: Message, state: FSMContext):
    await state.set_state(SeacrhPet.petname)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞: ', reply_markup=kb.exit_button)


@router.message(SeacrhPet.petname)
async def show_pets_username_handler(message: Message, state: FSMContext):
    try:
        petname = message.text
        pets = await rq.get_pet_by_petname(petname)
        if pets:
            await message.answer(f'–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{petname}</b>', parse_mode='html')
            for pet in pets:
                await message.answer_photo(
                    photo=FSInputFile(pet.photo_path),
                    caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n\n<b>{pet.likes}</b> ‚ù§Ô∏è',
                    reply_markup=kb.pets_keyboard_without_next(pet.id), parse_mode='html'
                )
        else:
            await message.answer('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º!')
        await state.clear()
    except Exception as e:
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ show_pets_by_username_handler: {e}')


@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back_to_watching_pets_handler(message: Message):
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=kb.watching_pets)
