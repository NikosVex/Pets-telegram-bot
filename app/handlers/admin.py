import logging
from aiogram import F, Router
from aiogram.types import Message, FSInputFile, CallbackQuery

import app.keyboards as kb
import app.database.requests as rq

router = Router()

admins_id = [1774953059, 2026368571, 2079877089]


@router.message(F.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üìÑ')
async def admin_handler(message: Message):
    user_id = message.from_user.id
    if user_id in admins_id:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ‚å®Ô∏è', reply_markup=kb.admin_keyboard)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–º–æ—á–∏–π –∞–¥–º–∏–Ω–∞!', reply_markup=kb.main_keyboard(user_id))


@router.callback_query(F.data == 'admin_proposal')
async def admin_proposal_handler(callback: CallbackQuery):
    try:
        user = callback.from_user.id
        if user:
            proposals = await rq.get_all_proposals()
            if proposals:
                await callback.message.answer('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:')
                for proposal in proposals:
                    await callback.message.answer(f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{proposal.username}</b>: \n\n'
                                                  f'{proposal.message}', parse_mode='html')
            else:
                await callback.message.answer('–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!')
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ admin_proposal_handler: {e}')


@router.callback_query(F.data == 'admin_pet')
async def admin_pet_handler(callback: CallbackQuery):
    try:
        user = callback.from_user.id
        if user:
            pets_to_check = await rq.get_show_false()
            if pets_to_check:
                await callback.message.answer('–ü–∏—Ç–æ–º—Ü—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:')
                for pet in pets_to_check:
                    await callback.message.answer_photo(
                        photo=FSInputFile(pet.photo_path),
                        caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                        f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n\n<b>–î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞?</b>',
                        reply_markup=kb.admin_check_pets_keyboard(pet.id), parse_mode='html'
                    )
            else:
                await callback.message.answer('–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')
    except Exception as e:
        await callback.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ admin_pet_handler: {e}')


@router.callback_query(F.data.startswith('true_'))
async def show_pet_true_handler(callback: CallbackQuery):
    try:
        pet_id = int(callback.data.split('_')[1])
        await rq.change_pet_true(pet_id)
        await callback.answer('–ü–∏—Ç–æ–º–µ—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω!')
        await callback.message.delete()
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏—Ç–æ–º—Ü–∞!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ show_pet_true_handler: {e}')


@router.callback_query(F.data.startswith('false_'))
async def show_pet_false_handler(callback: CallbackQuery):
    try:
        pet_id = int(callback.data.split('_')[1])
        await callback.answer('–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!')
        await rq.delete_pet(pet_id)
        await callback.message.delete()
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ show_pet_false_handler: {e}')
