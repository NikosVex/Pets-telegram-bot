import os
import logging
from aiogram import F, Router
from aiogram.types import CallbackQuery
from dotenv import load_dotenv

import app.keyboards as kb
import app.database.requests as rq

router = Router()

load_dotenv()


@router.callback_query(F.data.startswith('like_'))
async def like_handler(callback: CallbackQuery):
    try:
        pet_id = int(callback.data.split('_')[1])
        user_id = callback.from_user.id
        already_liked = await rq.check_user_liked(user_id, pet_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∞–π–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if already_liked:
            await callback.answer('–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!')
        else:
            await rq.add_like(user_id, pet_id)
            await callback.answer('–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –ø–∏—Ç–æ–º—Ü–∞!')
            pet = await rq.update_pet(pet_id)
            if pet:
                await callback.message.edit_caption(
                    caption=f'–ò–º—è: <b>{pet.name}</b>\n–ü–æ—Ä–æ–¥–∞: <b>{pet.breed}</b>\n'
                    f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{pet.additionally}</b>\n\n<b>{pet.likes}</b> ‚ù§Ô∏è',
                    reply_markup=kb.pets_keyboard(pet_id), parse_mode='html'
                )
            count_of_likes = await rq.count_of_likes(user_id)
            if count_of_likes == 10:
                await callback.message.answer(f'üèÜ –ê—á–∏–≤–∫–∞!\n–í—ã –ª–∞–π–∫–Ω—É–ª–∏ 10 –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ '
                                              f'{os.getenv("SECRET_WORD_2")}!')
    except Exception as e:
        await callback.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ!')
        logging.error(f'–û—à–∏–±–∫–∞ –≤ like_handler: {e}')
